import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from 'electron'
import { Readable } from 'stream'
import { spawn } from 'child_process'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

let mainWindow: BrowserWindow

function handleWifiConnnect(event: IpcMainInvokeEvent) {
    const child = spawn('sudo', [`${process.env.INIT_CWD}/src/scripts/wifi-connect`]);
    child.stdout.on('data', (data: string) => {
      //data.setEncoding('utf8')
      const value = `stdout: ${data}`
      console.log(value);
      mainWindow.webContents.send('stdout', value)
      //mainWindow.webContents.send('stdout', Buffer.from(data.buffer).toString())
    });
    child.stderr.on('data', (data: string) => {
      const value = `stderr: ${data}`
      console.error(value);
      mainWindow.webContents.send('stderr', value)
    });
    child.on('exit', (code: number) => {
      const value = `exit: child process exited with code ${code}`
      console.log(value);
      mainWindow.webContents.send('exit', value)
    });
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
};

app.whenReady().then(() => {
  console.log(process.env)
  ipcMain.on('wifi-connect', handleWifiConnnect)
  createWindow()
  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
//app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

/*
app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
*/

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
